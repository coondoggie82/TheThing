Installing Software
1. Download and Install Eclipse for C/C++ Developers
2. Download and Install Arduino IDE- use version 1.0.6, the newest versions
   don't quite work with the eclipse plugin
3. Verify that you can upload example Blink sketch to the Mega from Arduino.
4. Install Git

Getting the Source Code
1. Open your Git shell, and navigate to the folder where you want to keep all of your code
2. Type in the following command:
	git clone https://github.com/coondoggie82/TheThing
This will create the folder “TheThing” and download all of the source code for it

Get Eclipse to work with Arduino
There are a few different options on how to do this, I’m using the plugin from these guys on a Mac and it was pretty easy to setup: http://www.baeyens.it/eclipse/.

1. Launch Eclipse, select “TheThing” folder that was created above as your workspace
2. Go to Help>Install New Software
3. In the “Work With:” field, type in: http://www.baeyens.it/eclipse/update
4. Select the most recent version (I’m using 1.2.4) and install it.
5. Open Eclipse>Preferences (Windows: Window>Preferences)
6. Under Arduino>Arduino you will need to fill in the Arduino IDE path and the Private Library path. Replace the <ARDUINOPATH> with wherever you installed Arduino (on a mac it’s usually /Applications/Arduino.app/)
	Arduino IDE Path: <ARDUINOPATH>/Contents/Resources/Java
	Private Library Path: Browse to and select the libraries folder for Arduino (on a mac its /Users/<username>/Documents/Arduino/libraries)
7. Check the box “Use Arduino IDE tools in eclipse”
8. Under Arduino>AVRDude check “Use custom config file for AVRDude”
9. Set the config file to: <ARDUINOPATH>/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf
10. Under Arduino>Paths set AVR-GCC, AVRDude, and GNU make to <ARDUINOPATH>/Contents/Resources/Java/hardware/tools/avr/bin
11. Set AVR Header Files to <ARDUINOPATH>/Contents/Resources/Java/hardware/tools/avr/avr/include
12. Check the box that says “Disable search for system paths on startup”
13. Under C/C++>Indexer check the boxes next to “Index unused headers” and “Index source and header files opened in editor”
14. Under General>Workspace check the box next to “Save automatically before build”

Create your new Project
1. Make sure your Arduino Mega is plugged in to the computer
2. Go to File>New>Project…
3. Select Arduino>New Arduino Sketch
4. For the project name, type in “Thing” and click Next
5. Select “Arduino Mega 2560 or Mega ADK” as the Board
6. Select the correct port (the same one you chose when you uploaded from Arduino)
7. Click Finish
8. Add paths to headers - right click on the project and select "Properties"
9. Under C/C++ general, select "Paths and Symbols"
10. Under the "Includes" tab, select GNU C++ and click "Add..."
11. Check the box for "Is a workspace path" and put the directory "/Thing/Subsystems"
12. Click OK
13. Repeat this for the Commands and Inputs folders.
14. Click Apply, then OK
15. Whew... good job

Update your project from github
Since this just created a default project, we need to sync up with the code that is on github
1. Navigate to “TheThing” folder in your git shell
2. Run the command: git stash    (this command “stashes” any changes you made, in this case, it was the IDE that created default Thing.cpp and Thing.h files)
3. Go to Project>Build All
4. Click the upload to device button (It says AVR* and has a little green down arrow)
5. If you see something like this in your console then everything worked perfectly:
———————————————————————————————
Launching /Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin/avrdude -patmega2560 -cwiring -P/dev/tty.usbmodem1421 -b115200 -Uflash:w:Thing.hex:a -C/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf 
Output:

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e9801
avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file "Thing.hex"
avrdude: input file Thing.hex auto detected as Intel Hex
avrdude: writing flash (1658 bytes):

Writing | ################################################## | 100% 0.25s

avrdude: 1658 bytes of flash written
avrdude: verifying flash memory against Thing.hex:
avrdude: load data flash data from input file Thing.hex:
avrdude: input file Thing.hex auto detected as Intel Hex
avrdude: input file Thing.hex contains 1658 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 0.18s

avrdude: verifying ...
avrdude: 1658 bytes of flash verified

avrdude done.  Thank you.

avrdude finished

———————————————————————————————

Windows Paths

Arduino IDE Path: <ARDUINOPATH>
AVRDude config file: <ARDUINOPATH>\hardware\tools\avr\doc\avrdude\avrdude.pdf
AVR GGC: <ARDUINOPATH>\hardware\tools\avr\bin
GNU make: <ARDUINOPATH>\hardware\tools\avr\utils\bin
AVR Header File: <ARDUINOPATH>\hardware\tools\avr\avr\include
AVRDude: <ARDUINOPATH>\hardware\tools\avr\bin
