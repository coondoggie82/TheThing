{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue0;}
\margl1440\margr1440\vieww19860\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Installing Software\
1. Download and Install Eclipse for C/C++ Developers\
2. Download and Install Arduino IDE\
3. Verify that you can upload example Blink sketch to the Mega from Arduino.\
4. Install Git\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Getting the Source Code\
1. Open your Git shell, and navigate to the folder where you want to keep all of your code\
2. Type in the following command:\
	git clone https://github.com/coondoggie82/TheThing\
This will create the folder \'93TheThing\'94 and download all of the source code for it\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Get Eclipse to work with Arduino\
There are a few different options on how to do this, I\'92m using the plugin from these guys on a Mac and it was pretty easy to setup: {\field{\*\fldinst{HYPERLINK "http://www.baeyens.it/eclipse/"}}{\fldrslt http://www.baeyens.it/eclipse/}}.\
\
1. Launch Eclipse, select \'93TheThing\'94 folder that was created above as your workspace\
2. Go to Help>Install New Software\
3. In the \'93Work With:\'94 field, type in: {\field{\*\fldinst{HYPERLINK "http://www.baeyens.it/eclipse/"}}{\fldrslt http://www.baeyens.it/eclipse/}}\
4. Select the most recent version (I\'92m using 1.2.4) and install it.\
5. Open Eclipse>Preferences\
6. Under Arduino>Arduino you will need to fill in the Arduino IDE path and the Private Library path. Replace the <ARDUINOPATH> with wherever you installed Arduino (on a mac it\'92s usually /Applications/Arduino.app/)\
	Arduino IDE Path: <ARDUINOPATH>/Contents/Resources/Java\
	Private Library Path: Browse to and select the libraries folder for Arduino (on a mac its /Users/<username>/Documents/Arduino/libraries)\
7. Check the box \'93Use Arduino IDE tools in eclipse\'94\
8. Under Arduino>AVRDude check \'93Use custom config file for AVRDude\'94\
9. Set the config file to: <ARDUINOPATH>/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf\
10. Under Arduino>Paths set AVR-GCC, AVRDude, and GNU make to <ARDUINOPATH>/Contents/Resources/Java/hardware/tools/avr/bin\
11. Set AVR Header Files to <ARDUINOPATH>/Contents/Resources/Java/hardware/tools/avr/avr/include\
12. Check the box that says \'93Disable search for system paths on startup\'94\
13. Under C/C++>Indexer check the boxes next to \'93Index unused headers\'94 and \'93Index source and header files opened in editor\'94\
14. Under General>Workspace check the box next to \'93Save automatically before build\'94\
15. Whew\'85 good job.\
\
Create your new Project\
1. Make sure your Arduino Mega is plugged in to the computer\
2. Go to File>New>Project\'85\
3. Select Arduino>New Arduino Sketch\
4. For the project name, type in \'93Thing\'94 and click Next\
5. Select \'93Arduino Mega 2560 or Mega ADK\'94 as the Board\
6. Select the correct port (the same one you chose when you uploaded from Arduino)\
7. Click Finish\
\
Update your project from github\
Since this just created a default project, we need to sync up with the code that is on github\
1. Navigate to \'93TheThing\'94 folder in your git shell\
2. Run the command: git stash    (this command \'93stashes\'94 any changes you made, in this case, it was the IDE that created default Thing.cpp and Thing.h files)\
3. Go to Project>Build All\
4. Click the upload to device button (It says AVR* and has a little green down arrow)\
5. If you see something like this in your console then everything worked perfectly:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720

\f1\fs22 \cf0 Launching /Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin/avrdude -patmega2560 -cwiring -P/dev/tty.usbmodem1421 -b115200 -Uflash:w:Thing.hex:a -C/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf \
Output:\
\
\pard\pardeftab720
\cf2 avrdude: AVR device initialized and ready to accept instructions\cf0 \
\
\cf2 Reading | ################################################## | 100% 0.01s\cf0 \
\
\cf2 avrdude: Device signature = 0x1e9801\cf0 \
\cf2 avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed\cf0 \
\cf2          To disable this feature, specify the -D option.\cf0 \
\cf2 avrdude: erasing chip\cf0 \
\cf2 avrdude: reading input file "Thing.hex"\cf0 \
\cf2 avrdude: input file Thing.hex auto detected as Intel Hex\cf0 \
\cf2 avrdude: writing flash (1658 bytes):\cf0 \
\
\cf2 Writing | ################################################## | 100% 0.25s\cf0 \
\
\cf2 avrdude: 1658 bytes of flash written\cf0 \
\cf2 avrdude: verifying flash memory against Thing.hex:\cf0 \
\cf2 avrdude: load data flash data from input file Thing.hex:\cf0 \
\cf2 avrdude: input file Thing.hex auto detected as Intel Hex\cf0 \
\cf2 avrdude: input file Thing.hex contains 1658 bytes\cf0 \
\cf2 avrdude: reading on-chip flash data:\cf0 \
\
\cf2 Reading | ################################################## | 100% 0.18s\cf0 \
\
\cf2 avrdude: verifying ...\cf0 \
\cf2 avrdude: 1658 bytes of flash verified\cf0 \
\
\cf2 avrdude done.  Thank you.\cf0 \
\
avrdude finished
\f0\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
}